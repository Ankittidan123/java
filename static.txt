1)
class A 
variable :static 
method :print 

class Main 
access

Ans)
import java.util.*;
class A{
    static int a;
    void show(){
        System.out.println("This is a : "+a);
    }
}
public class Test{
    public static void main(String[] args) {
        A k = new A();
        k.show();                                                            
    }
}

----------------------------------------------------------------
class A 
variable :static 
method :print static

class Main 
access

Ans)
import java.util.*;
class A{
    static int a;
    static void show(){
        System.out.println("This is a : "+a);
    }
}
public class Test{
    public static void main(String[] args) {
        A.show();                                                            
    }
}

----------------------------------------------------------------
class A 
variable :non static 
method :print static

class Main 
access

Ans)
import java.util.*;
class A{
    int a;
    static void show(int a){
        a = a;
        System.out.println("This is a : "+a);
    }
}
public class Test{
    public static void main(String[] args) {
        A.show(2);                                                            
    }
}

----------------------------------------------------------------
class A 
variable : 
method :print

class Main 
access

Ans)
import java.util.*;
class A{
    int a;
    void show(int a){
        a = a;
        System.out.println("This is a : "+a);
    }
}
public class Test{
    public static void main(String[] args) {
        A k = new A();
        k.show(2);                                                            
    }
}

--------------------------------------------
class A 
	class B
		method :non static 

Main class 
access

Ans)
import java.util.*;
class A{
    class B{
        void show(){
            System.out.println("Hello show");
        }
    }
}
public class Test{
    public static void main(String[] args) {
        A k = new A();
        A.B p = k.new B();
        p.show();                                                            
    }
}

--------------------------------------------
class A 
	class B
		method : static 

Main class 
access

Ans)
import java.util.*;
class A{
    class B{
        static void show(){
            System.out.println("Hello show");
        }
    }
}
public class Test{
    public static void main(String[] args) {
        A.B.show();                                                            
    }
}

--------------------------------------------
class A 
	class B
		variable :static 
		method :non static 

Main class 
access

Ans)
import java.util.*;
class A{
    class B{
        static int a = 1;
        void show1(){
            System.out.println("Show1"+a);
        }
    }
}
public class Test{
    public static void main(String[] args) {
        A k = new A();
        A.B p = k.new B();
        p.show1();                                                           
    }
}
--------------------------------------------
class A 
	class B
		variable :static 
		method : static 

Main class 
access

Ans)
import java.util.*;
class A{
    class B{
        static int a = 1;
        static void show1(){
            System.out.println("Show1"+a);
        }
    }
}
public class Test{
    public static void main(String[] args) {
        A.B.show1();                                                           
    }
}

--------------------------------------------
class A 
	class B
		variable :non static 
		method : static 

Main class 
access

Ans)
import java.util.*;
class A{
    class B{
        int a = 1;
        static void show1(){
            System.out.println("Show1"+a);  // error at a because you can not use normal variable in static method
        }
    }
}
public class Test{
    public static void main(String[] args) {
        A.B.show1();                                                           
    }
}
--------------------------------------------
class A 
	class B
		variable :static 
		public method : static 

Main class 
access

Ans)
import java.util.*;
class A{
    class B{
        static int a = 1;
        public static void show1(){
            System.out.println("Show1"+a);
        }
    }
}
public class Test{
    public static void main(String[] args) {
        A.B.show1();                                                           
    }
}


--------------------------------------------
class A 
	class B
		variable :static 
		variable :non static 

		public method : static 
		public method : non static 

Main class 
access

Ans)
import java.util.*;
class A{
    class B{
        static int a = 1;
        int b = 2;
        public static void show1(){
            System.out.println("Show1"+a);
        }
        public void show2(){
            System.out.println("show2"+b);
        }
    }
}
public class Test{
    public static void main(String[] args) {
        A k = new A();
        A.B p = k.new B();
        p.show2();
        A.B.show1();                                                           
    }
}

--------------------------------------------
class A 
	show1() :non static :no return and no argument 
	show2() : static : return and no argument 
	show3() : static : return and  argument 
	show4()  :non static :no return and no argument 

Main class access 

Ans)
import java.util.*;
class A{
    void show1(){
        System.out.println("Hello i am show1");
    }
    static int show2(){
        System.out.println("Hello i am show2");
        return 0;
    }
    static int show2(int a){
        System.out.println("Hello i am show3");
        return 0;
    }
    void show4(){
        System.out.println("Hello i am show4");
    }
}
public class Test{
    public static void main(String[] args) {
        A k = new A();
        k.show1();
        k.show4();
        A.show2();
        A.show2(3);                                                    
    }
}

--------------------------------------------
class A 
	public show1() :non static :no return and no argument 
	private show2() : static : return and no argument 
	protected show3() : static : return and  argument 
	public show4()  :non static :no return and no argument 

Main class access 

Ans)
import java.util.*;
class A{
    public void show1(){
        System.out.println("Hello i am show1");
    }
    private static int show2(){
        System.out.println("Hello i am show2");
        return 0;
    }
    protected static int show3(int a){
        System.out.println("Hello i am show3");
        return 0;
    }
    public void show4(){
        System.out.println("Hello i am show4");
    }
}
public class Test{
    public static void main(String[] args) {
        A k = new A();
        k.show1();
        k.show4();
        A.show2(); // error because we can not fatch private static method like a normal static method which fatched like "A.show()"
        A.show3(3);                                                    
    }
}
--------------------------------------------
class A 
	show1() : static :no return and no argument 
	show1() : static :no return and no argument 
	show1() : static :no return and no argument 
	show1() : static :no return and no argument 
	show1() : static :no return and no argument 

static method overload is it possible ? 
overloading dor krni hey 

Ans)
import java.util.*;
class A{
    static void show1(){
        System.out.println("Hello i am first show");
    }
    static void show1(){
        System.out.println("Hello i am second show");
    }
    static void show1(){
        System.out.println("Hello i am third show");
    }
    static void show1(){
        System.out.println("Hello i am fourth show");
    }
    static void show1(){
        System.out.println("Hello i am fifth show");
    }
}
public class Test{
    public static void main(String[] args) {
        A.show1();                       
    }
}

// there is overloading of the methods because we have all the methods with the same name;

import java.util.*;
class A{
    static void show1(){
        System.out.println("Hello i am first show");
    }
    static void show1(int a){
        System.out.println("Hello i am second show");
    }
    static void show1(int a,int b){
        System.out.println("Hello i am third show");
    }
    static void show1(float a){
        System.out.println("Hello i am fourth show");
    }
    static void show1(double a){
        System.out.println("Hello i am fifth show");
    }
}
public class Test{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("The value of a");
        int a = sc.nextInt();
        System.out.println("The value of b");
        int b = sc.nextInt();
        A.show1();
        A.show1(a);                      
        A.show1(a);
        A.show1(a);
        A.show1(a,b);
    }
}

--------------------------------------------
class A
	show1() : static :no return and no argument 

class B ex A
	show2() : static : return and no argument 

class Main access 

Ans)
import java.util.*;
class A{
    static void show1(){
        System.out.println("Hello i am show1");
    }
}
class B extends A{
    static int show2(){
        System.out.println("hello i am show2");
        return 0;
    }
}
public class Test{
    public static void main(String[] args) {
        B.show2();
        B.show1();
    }
}

---------------------------------------------------------------------
class A
	public show1() : static :no return and no argument 

class B ex A
	show2() : static : return and no argument 

class Main access 

Ans)
import java.util.*;
class A{
    public static void show1(){
        System.out.println("Hello i am show1");
    }
}
class B extends A{
    static int show2(){
        System.out.println("hello i am show2");
        return 0;
    }
}
public class Test{
    public static void main(String[] args) {
        B.show2();
        B.show1();
    }
}

---------------------------------------------------------------------
class A
	private show1() : static :no return and no argument 

class B ex A
	show2() : static : return and no argument 

class Main access 

Ans)
import java.util.*;
class A{
    private static void show1(){
        System.out.println("Hello i am show1");
    }
}
class B extends A{
    static int show2(){
        System.out.println("hello i am show2");
        return 0;
    }
}
public class Test{
    public static void main(String[] args) {
        B.show2();
        B.show1();
    }
}

// error because we can not fatch the private static method
---------------------------------------------------------------------
class A
	protected show1() : static :no return and no argument 

class B ex A
	show2() : static : return and no argument 

class Main access 

Ans)
import java.util.*;
class A{
    protected static void show1(){
        System.out.println("Hello i am show1");
    }
}
class B extends A{
    static int show2(){
        System.out.println("hello i am show2");
        return 0;
    }
}
public class Test{
    public static void main(String[] args) {
        B.show2();
        B.show1();
    }
}

------------------------------------------
class A
	instance :protected static 
	static method access

class B ex A
	method :static 

Main class :access 

Ans)
import java.util.*;
class A{
    protected static int a = 1;
    static void show1(){
        System.out.println("Hello i am show1"+a);
    }
}
class B extends A{
    static int show2(){
        System.out.println("hello i am show2");
        return 0;
    }
}
public class Test{
    public static void main(String[] args) {
        B.show2();
        B.show1();
    }
}

----------------------------------------------------
class A
	constructor :private 

Main class 
access

Ans)
import java.util.*;
class A{
    private A(){
        System.out.println("I am private constructer");
    }
}
public class Test{
    public static void main(String[] args) {
        new A();
    }
}

//error "The constructer is not visible because it is private"
spo we can  not fatach a private constructer
----------------------------------------------------
class A
	constructor :public  

Main class 
access

Ans)
import java.util.*;
class A{
    public A(){
        System.out.println("I am public constructer");
    }
}
public class Test{
    public static void main(String[] args) {
        new A();
    }
}

----------------------------------------------------
class A
	constructor :protected 

Main class 
access

Ans)
import java.util.*;
class A{
    protected A(){
        System.out.println("I am protected constructer");
    }
}
public class Test{
    public static void main(String[] args) {
        new A();
    }
}

----------------------------------------------------
class A
	constructor :protected 

class B ex A 

Main class 
access

Ans)
import java.util.*;
class A{
    protected A(){
        System.out.println("I am protected constructer");
    }
}
class B extends A{

}
public class Test{
    public static void main(String[] args) {
        B k = new B();
    }
}

----------------------------------------------------
class A
	constructor :protected :parameterised 

class B ex A 

Main class 
access

Ans)
import java.util.*;
class A{
    protected A(int a){
        System.out.println("I am protected constructer"+a);
    }
}
class B extends A{
    B(){
        super(34);
    }
}
public class Test{
    public static void main(String[] args) {
        B k = new B();
    }
}
----------------------------------------------------
class A
	constructor :protected 

class B ex A 

class C ex B 

Main class 
access

Ans)
import java.util.*;
class A{
    protected A(int a){
        System.out.println("I am protected constructer"+a);
    }
}
class B extends A{
    B(){
        super(34);
    }
}
class C extends B{

}
public class Test{
    public static void main(String[] args) {
        C k = new C();
    }
}

------------------------------------------------
class A 
	class B 
		msg() { class C } 

Main class access

Ans)
import java.util.*;
class A{
    class B{
        void msj(){
            class C{
                void show(){
                    System.out.println("Hello i am inside");
                }
		C o = new C();
		o.show();
            }

        }
    }
}

public class Test{
    public static void main(String[] args) {
        A k = new A();
        A.B p = k.new B();
        p.msj();        
    }
}

//nhi ho rhi access 
---------
defination + example (copy +laptop) 

inner class
member inner class
local inner class 
anonymous inner class 
